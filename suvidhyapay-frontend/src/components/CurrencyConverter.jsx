import React, { useState, useEffect } from 'react';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { 
  FaExchangeAlt, 
  FaDownload, 
  FaUser, 
  FaCalendarAlt,
  FaGlobe,
  FaInfoCircle,
  FaHistory,
  FaSpinner
} from 'react-icons/fa';

// PDF generation using browser APIs to avoid jsPDF issues
const generatePDFWithoutLibrary = (userName, amount, fromCurrency, toCurrency, convertedAmount, conversionRates, conversionHistory, getCurrencySymbol) => {
  try {
    // Create a printable div
    const printContent = document.createElement('div');
    printContent.style.padding = '20px';
    printContent.style.fontFamily = 'Arial, sans-serif';
    
    // Add content
    const header = document.createElement('h1');
    header.style.color = '#03396c';
    header.style.textAlign = 'center';
    header.textContent = 'Currency Conversion Report';
    printContent.appendChild(header);
    
    // User info section
    const userInfo = document.createElement('div');
    userInfo.style.marginBottom = '20px';
    userInfo.innerHTML = `
      <p><strong>User:</strong> ${userName}</p>
      <p><strong>Date:</strong> ${new Date().toLocaleString()}</p>
      <p><strong>From:</strong> ${getCurrencySymbol(fromCurrency)}${parseFloat(amount).toLocaleString()} ${fromCurrency}</p>
      <p><strong>To:</strong> ${getCurrencySymbol(toCurrency)}${parseFloat(convertedAmount).toLocaleString()} ${toCurrency}</p>
      <p><strong>Exchange Rate:</strong> 1 ${fromCurrency} = ${conversionRates[toCurrency]?.toFixed(4)} ${toCurrency}</p>
    `;
    printContent.appendChild(userInfo);
    
    // History section
    if (conversionHistory?.length > 0) {
      const historyHeader = document.createElement('h2');
      historyHeader.textContent = 'Recent Conversion History';
      historyHeader.style.color = '#03396c';
      printContent.appendChild(historyHeader);
      
      const historyTable = document.createElement('table');
      historyTable.style.width = '100%';
      historyTable.style.borderCollapse = 'collapse';
      historyTable.style.marginBottom = '20px';
      
      // Add table header
      const tableHead = document.createElement('thead');
      tableHead.innerHTML = `
        <tr style="background-color: #f2f2f2;">
          <th style="padding: 8px; text-align: left; border: 1px solid #ddd;">Date</th>
          <th style="padding: 8px; text-align: left; border: 1px solid #ddd;">From</th>
          <th style="padding: 8px; text-align: left; border: 1px solid #ddd;">To</th>
          <th style="padding: 8px; text-align: left; border: 1px solid #ddd;">Amount</th>
          <th style="padding: 8px; text-align: left; border: 1px solid #ddd;">Converted</th>
        </tr>
      `;
      historyTable.appendChild(tableHead);
      
      // Add table body
      const tableBody = document.createElement('tbody');
      conversionHistory.forEach(conversion => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">${conversion.date.split(', ')[0]}</td>
          <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">${conversion.fromCurrency}</td>
          <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">${conversion.toCurrency}</td>
          <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">${getCurrencySymbol(conversion.fromCurrency)}${parseFloat(conversion.amount).toLocaleString()}</td>
          <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">${getCurrencySymbol(conversion.toCurrency)}${parseFloat(conversion.convertedAmount).toLocaleString()}</td>
        `;
        tableBody.appendChild(row);
      });
      historyTable.appendChild(tableBody);
      printContent.appendChild(historyTable);
    }
    
    // Footer
    const footer = document.createElement('div');
    footer.style.marginTop = '30px';
    footer.style.borderTop = '1px solid #ddd';
    footer.style.paddingTop = '10px';
    footer.style.fontSize = '12px';
    footer.style.color = '#666';
    footer.style.textAlign = 'center';
    footer.innerHTML = `
      <p>Generated by SuvidhyaPay Currency Converter | ${new Date().toLocaleString()}</p>
      <p>* Exchange rates provided by ExchangeRate-API.</p>
      <p>* Reports generated can be used for personal reference only.</p>
    `;
    printContent.appendChild(footer);
    
    // Open a new window for printing
    const printWindow = window.open('', '_blank', 'height=600,width=800');
    printWindow.document.write('<html><head><title>Currency Conversion Report</title>');
    printWindow.document.write('</head><body>');
    printWindow.document.write(printContent.outerHTML);
    printWindow.document.write('</body></html>');
    printWindow.document.close();
    
    // Print or save options
    printWindow.document.title = `Currency_Conversion_${userName.trim().replace(/[^a-z0-9]/gi, '_')}_${new Date().toISOString().slice(0, 10)}`;
    
    // Give time for resources to load before printing
    printWindow.setTimeout(() => {
      printWindow.print();
    }, 500);
    
    return true;
  } catch (error) {
    console.error('PDF Generation Error:', error);
    return false;
  }
};

const CurrencyConverter = () => {
  const [amount, setAmount] = useState('');
  const [fromCurrency, setFromCurrency] = useState('INR');
  const [toCurrency, setToCurrency] = useState('USD');
  const [convertedAmount, setConvertedAmount] = useState(null);
  const [loading, setLoading] = useState(false);
  const [fetchingRates, setFetchingRates] = useState(false);
  const [error, setError] = useState('');
  const [userName, setUserName] = useState('');
  const [conversionRates, setConversionRates] = useState({});
  const [baseCode, setBaseCode] = useState('');
  const [lastUpdateTime, setLastUpdateTime] = useState('');
  const [nextUpdateTime, setNextUpdateTime] = useState('');
  const [conversionHistory, setConversionHistory] = useState([]);

  // API credentials
  const API_KEY = '9d6722554e5ba7f0af6b3652';
  const API_URL = 'https://v6.exchangerate-api.com/v6';

  // Common currencies with symbols
  const currencies = [
    { code: 'INR', name: 'Indian Rupee', symbol: '₹' },
    { code: 'USD', name: 'US Dollar', symbol: '$' },
    { code: 'EUR', name: 'Euro', symbol: '€' },
    { code: 'GBP', name: 'British Pound', symbol: '£' },
    { code: 'JPY', name: 'Japanese Yen', symbol: '¥' },
    { code: 'AUD', name: 'Australian Dollar', symbol: 'A$' },
    { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$' },
    { code: 'CHF', name: 'Swiss Franc', symbol: 'Fr' },
    { code: 'CNY', name: 'Chinese Yuan', symbol: '¥' },
    { code: 'SGD', name: 'Singapore Dollar', symbol: 'S$' },
    { code: 'AED', name: 'UAE Dirham', symbol: 'د.إ' },
    { code: 'ZAR', name: 'South African Rand', symbol: 'R' },
  ];

  // Fetch exchange rates when component mounts and when fromCurrency changes
  useEffect(() => {
    fetchExchangeRates(fromCurrency);
  }, [fromCurrency]);

  const fetchExchangeRates = async (baseCurrency) => {
    setFetchingRates(true);
    setError('');
    
    try {
      const response = await fetch(`${API_URL}/${API_KEY}/latest/${baseCurrency}`);
      const data = await response.json();
      
      if (data.result === 'success') {
        setConversionRates(data.conversion_rates);
        setBaseCode(data.base_code);
        setLastUpdateTime(data.time_last_update_utc);
        setNextUpdateTime(data.time_next_update_utc);
      } else {
        setError(`API Error: ${data["error-type"] || 'Unknown error'}`);
      }
    } catch (err) {
      setError('Failed to fetch exchange rates. Please check your internet connection.');
    } finally {
      setFetchingRates(false);
    }
  };

  const getCurrencySymbol = (code) => {
    const currency = currencies.find(c => c.code === code);
    return currency ? currency.symbol : '';
  };

  const handleConvert = () => {
    if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
      setError('Please enter a valid amount');
      return;
    }

    setLoading(true);
    setError('');

    try {
      if (!conversionRates[toCurrency]) {
        setError(`Exchange rate for ${toCurrency} not available`);
        setLoading(false);
        return;
      }

      const rate = conversionRates[toCurrency];
      const result = parseFloat(amount) * rate;
      setConvertedAmount(result.toFixed(2));
      
      // Add to conversion history
      const newConversion = {
        id: Date.now(),
        amount,
        fromCurrency,
        toCurrency,
        convertedAmount: result.toFixed(2),
        rate,
        date: new Date().toLocaleString()
      };
      
      setConversionHistory([newConversion, ...conversionHistory].slice(0, 5));
    } catch (err) {
      setError('Failed to convert currency. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const swapCurrencies = () => {
    // Need to refetch when we swap
    const temp = fromCurrency;
    setFromCurrency(toCurrency);
    setToCurrency(temp);
    setConvertedAmount(null);
  };

  const generatePDF = () => {
    setError("");
    try {
      // Validation checks
      if (!convertedAmount) {
        setError('Please perform a currency conversion first');
        toast.error('Please perform a currency conversion first');
        return;
      }
      if (!userName?.trim()) {
        setError('Please enter your name for the PDF report');
        toast.error('Please enter your name for the PDF report');
        return;
      }
      
      // Use our browser-based PDF generation function instead of jsPDF
      const success = generatePDFWithoutLibrary(
        userName, 
        amount, 
        fromCurrency, 
        toCurrency, 
        convertedAmount, 
        conversionRates, 
        conversionHistory,
        getCurrencySymbol
      );
      
      if (success) {
        toast.success('PDF report generated successfully!');
      } else {
        throw new Error('Failed to generate PDF');
      }
    } catch (error) {
      console.error('PDF Generation Error:', error);
      setError('Failed to generate PDF report. Please try again.');
      toast.error('Failed to generate PDF report. Please try again.');
    }
  };

  return (
    <>
      <ToastContainer position="top-right" autoClose={3000} />
      <div className="bg-gradient-to-br from-blue-50 to-indigo-50 p-6 rounded-xl shadow-lg max-w-4xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-3xl font-bold text-blue-800">Currency Converter</h2>
          <div className="flex items-center">
            <span className="bg-blue-600 text-white px-3 py-1 rounded-full text-xs font-medium mr-2">Pro</span>
            <span className="text-xs text-gray-500">Powered by ExchangeRate-API</span>
          </div>
        </div>

        {/* User Name Input */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Your Name (for PDF Report)
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FaUser className="text-gray-400" />
            </div>
            <input
              type="text"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
              placeholder="Enter your name"
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 shadow-sm text-gray-900"
            />
          </div>
        </div>

        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Amount Input */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Amount
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-gray-500 font-medium">{getCurrencySymbol(fromCurrency)}</span>
                </div>
                <input
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  placeholder="Enter amount"
                  className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-lg"
                />
              </div>
            </div>

            {/* From Currency */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                From Currency
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FaGlobe className="text-gray-400" />
                </div>
                <select
                  value={fromCurrency}
                  onChange={(e) => setFromCurrency(e.target.value)}
                  className="block w-full pl-10 py-3 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                >
                  {currencies.map((currency) => (
                    <option key={currency.code} value={currency.code}>
                      {currency.code} - {currency.name} ({currency.symbol})
                    </option>
                  ))}
                </select>
                {fetchingRates && (
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <FaSpinner className="text-blue-500 animate-spin" />
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Swap Button */}
          <div className="flex justify-center items-center">
            <button
              type="button"
              onClick={swapCurrencies}
              disabled={fetchingRates}
              className="p-3 rounded-full bg-indigo-100 hover:bg-indigo-200 text-blue-600 transition-all transform hover:scale-110 shadow disabled:opacity-50"
            >
              <FaExchangeAlt className="text-xl" />
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* To Currency */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                To Currency
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FaGlobe className="text-gray-400" />
                </div>
                <select
                  value={toCurrency}
                  onChange={(e) => setToCurrency(e.target.value)}
                  className="block w-full pl-10 py-3 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                >
                  {currencies.map((currency) => (
                    <option key={currency.code} value={currency.code}>
                      {currency.code} - {currency.name} ({currency.symbol})
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Rates Update Information */}
            <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
              <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                <FaCalendarAlt className="mr-2 text-gray-400" /> Exchange Rate Info
              </label>
              <div className="text-sm text-gray-600">
                <div className="flex items-center">
                  <FaInfoCircle className="text-blue-500 mr-2" />
                  <span>Base: {baseCode || 'Loading...'}</span>
                </div>
                <div className="flex items-center mt-1">
                  <FaHistory className="text-blue-500 mr-2" />
                  <span>Last Updated: {lastUpdateTime || 'Loading...'}</span>
                </div>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              type="button"
              onClick={handleConvert}
              disabled={loading || fetchingRates || !amount}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-md disabled:opacity-50 flex-1 max-w-xs text-lg font-medium"
            >
              {loading ? (
                <span className="flex items-center justify-center">
                  <FaSpinner className="animate-spin mr-2" /> Converting...
                </span>
              ) : "Convert Now"}
            </button>
            
            <button
              type="button"
              onClick={generatePDF}
              disabled={!convertedAmount}
              className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors shadow-md disabled:opacity-50 flex-1 max-w-xs text-lg font-medium flex justify-center items-center gap-2"
            >
              <FaDownload /> Download Report
            </button>
          </div>
        </div>

        {/* Error Message */}
        {error && (
          <div className="mt-6 p-4 bg-red-50 border border-red-200 text-red-600 rounded-lg shadow-sm animate-pulse">
            <p className="font-medium">{error}</p>
          </div>
        )}

        {/* Conversion Result */}
        {convertedAmount && !error && (
          <div className="mt-6 p-6 bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg shadow">
            <h3 className="text-green-800 font-medium mb-2">Conversion Result:</h3>
            <div className="flex flex-col md:flex-row justify-between items-center gap-4">
              <div className="text-xl font-medium">
                {getCurrencySymbol(fromCurrency)}{parseFloat(amount).toLocaleString()} {fromCurrency}
              </div>
              <div className="text-blue-600">
                <FaExchangeAlt />
              </div>
              <div className="text-2xl font-bold text-green-700">
                {getCurrencySymbol(toCurrency)}{parseFloat(convertedAmount).toLocaleString()} {toCurrency}
              </div>
            </div>
            <p className="text-sm text-gray-600 mt-3">
              Exchange Rate: 1 {fromCurrency} = {conversionRates[toCurrency]?.toFixed(4) || 'N/A'} {toCurrency}
            </p>
          </div>
        )}

        {/* Conversion History */}
        {conversionHistory.length > 0 && (
          <div className="mt-8">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">Recent Conversions</h3>
            <div className="bg-white rounded-lg shadow overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">From</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">To</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Converted</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {conversionHistory.map((conversion) => (
                    <tr key={conversion.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{conversion.date}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">{conversion.fromCurrency}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">{conversion.toCurrency}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">
                        {getCurrencySymbol(conversion.fromCurrency)}{parseFloat(conversion.amount).toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-green-600 font-medium">
                        {getCurrencySymbol(conversion.toCurrency)}{parseFloat(conversion.convertedAmount).toLocaleString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        <div className="mt-8 text-sm text-gray-500 border-t border-gray-200 pt-4">
          <p>* Exchange rates provided by ExchangeRate-API.</p>
          <p>* Reports generated as PDF can be used for personal reference only.</p>
        </div>
      </div>
    </>
  );
};

export default CurrencyConverter;